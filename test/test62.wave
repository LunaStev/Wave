const AF_INET: i32 = 2;
const SOCK_DGRAM: i32 = 2;
const SYS_SOCKET: i64 = 41;
const SYS_BIND: i64 = 49;
const SYS_RECVFROM: i64 = 45;
const SYS_WRITE: i64 = 1;

fun do_recv(sockfd: i64, buf: ptr<array<i8, 128>>, src: ptr<array<i8, 16>>, srclen: ptr<i64>) -> i64 {
    var n: i64;
    asm {
        "syscall"
        out("rax") n
        in("rax") SYS_RECVFROM
        in("rdi") sockfd
        in("rsi") buf
        in("rdx") 128
        in("r10") src
        in("r8")  srclen
    }
    return n;
}

fun main() {
    var sockfd: i64;
    asm {
        "syscall"
        out("rax") sockfd
        in("rax") SYS_SOCKET
        in("rdi") AF_INET
        in("rsi") SOCK_DGRAM
        in("rdx") 0
    }
    println("socket fd = {}", sockfd);

    var addr: array<i8, 16> = [2, 0, 0x1F, 0x90, 0,0,0,0, 0,0,0,0, 0,0,0,0];

    var ret: i64;
    asm {
        "syscall"
        out("rax") ret
        in("rax") SYS_BIND
        in("rdi") sockfd
        in("rsi") &addr
        in("rdx") 16
    }
    println("bind ret = {}", ret);

    var buf: array<i8, 128>;
    var src: array<i8, 16>;
    var srclen: i64 = 16;

    var n: i64 = 0;

    while (n == 0) {
        n = do_recv(sockfd, &buf, &src, &srclen);

        if (n < 0) {
            println("recvfrom error {}", n);
        }
    }

    println("recvfrom got {} bytes", n);

    var ret2: i64;
    asm {
        "syscall"
        out("rax") ret2
        in("rax") SYS_WRITE
        in("rdi") 1
        in("rsi") &buf
        in("rdx") n
    }
}
